# Automatically generated by config.
# Edit arch/mips/conf/Makefile.mips instead, and rerun config.
#

#
# Makefile.mips
#
# OS/161 kernel makefile base for the MIPS r2000/r3000.
#
# The actual makefiles used are copies of this file - if you want to edit,
# edit kern/arch/mips/conf/Makefile.mips and rerun config.
#


#
# Filename for the kernel.
#
KERNEL=kernel

#
# Get the defs that were dumped out from the kernel config tool.
# This defines:
#	S		Path for top of kernel source tree
#	ARCH		Architecture ("mips")
#	DEBUGFLAGS	-O2 or -g
#	CONFNAME	The name of the kernel config, e.g., ASST1
#
include defs.mk

#
# Get the tree-wide defs.
# This defines (that we use):
#	OSTREE		Path for top of installed system tree
#	CC		C compiler
#	KCFLAGS		C compiler flags for kernel
#	LD		Linker
#	KLDFLAGS	Linker flags for kernel
#	SIZE		Object file size tool
#
include $S/../defs.mk

#
# Adjust defs for building the kernel.
#
# The LOAD_ADDRESS is the virtual address where the kernel will be loaded
# into memory. This is in the direct-mapped cached segment of the MIPS
# address space. -Ttext is the linker option for setting it.
#
# -T provides the linker with a "linker script". This is a piece of
# obscure mumble that tells the linker how to put together the output
# program. The only reason we need it is that the linker breaks if you
# try to use -Ttext and its default built-in linker script at the same
# time.
#
# -nostdinc prevents including header files other than our own, and 
# -nostdlib prevents linking against any standard libraries. Because
# the kernel has to be a completely standalone program, this is important.
#
# -ffreestanding tells gcc this is not an ordinary program, so it will
# make fewer unwise assumptions about standard library functions.
#
# We define _KERNEL so certain source files that are shared between the
# kernel and userland (like strcpy.c) can tell the difference so they know
# which header files to use.
#
# -G 0 tells the assembler and linker not to reference global variables
# via the "global pointer" (MIPS gp register) because we don't support 
# handling the gp register.
#
LOAD_ADDRESS=0x80001000
INCLUDES=-nostdinc -I$S/include -I$S/dev -I. 
CFLAGS=$(KCFLAGS) $(DEBUGFLAGS) $(INCLUDES) -ffreestanding -D_KERNEL -G 0
LDFLAGS=$(KLDFLAGS) -nostdlib \
	-Ttext $(LOAD_ADDRESS) -T $S/arch/mips/conf/ldscript \
	-G 0

#
# Rules for compiling various kinds of source files, by suffix.
# (There's nothing magical about these names and make.)
#
# We don't actually use C++ in OS/161, although, with some fiddling,
# you might be able to. But you must turn off exceptions and RTTI in
# order to do so (the implementations of these in gcc are completely 
# unsuitable for kernels.)
#
COMPILE.cc=$(CC) $(CFLAGS) -fno-rtti -fno-exceptions -c
COMPILE.c=$(CC) $(CFLAGS) -c
COMPILE.l=false   # redefine when needed 
COMPILE.y=false   # redefine when needed 
COMPILE.S=$(CC) $(CFLAGS) -c

#
# This should expand to all the header files in the kernel so they can
# be fed to tags.
#
TAGS_HEADERS=$S/include/*.h $S/include/kern/*.h $S/arch/$(ARCH)/include/*.h

#
# Default make rule: build the kernel.
#
all: $(KERNEL)

#
# Here's how we link the kernel. 
#
# vers.c/.o is generated on every build. It contains a numeric serial
# number incremented every time newvers.sh is run.  These values are
# printed out by newvers.sh and are also displayed at boot time. This
# makes it possible to tell at a glance whether you're actually
# running the same kernel you just compiled.
#
# The version number is kept in the file called "version" in the build
# directory.
#
# By immemorial tradition, "size" is run on the kernel after it's linked.
#
$(KERNEL):
	$S/conf/newvers.sh $(CONFNAME)
	$(COMPILE.c) vers.c
	$(LD) $(LDFLAGS) $(OBJS) vers.o -o $(KERNEL)
	$(SIZE) $(KERNEL)

#
# Use the -M argument to gcc to get it to output dependency information.
# Note that we use -M, which includes deps for #include <...> files,
# rather than -MM, which doesn't. This is because we are the operating
# system: the #include <...> files are part of our project - in fact, in
# the kernel they're the kernel's own include files - and they will be
# changing!
#
depend:
	$(CC) $(CFLAGS) -M $(SRCS) > depend.mk

#
# Remove everything generated during the compile.
# (To remove absolutely everything automatically generated, you can just
# blow away the whole compile directory.)
#
clean:
	rm -f *.o *.a tags $(KERNEL)

#
# Rerun config for this configuration.
#
reconfig:
	(cd ../../conf && ./config $(CONFNAME))

#
# [ -d $(OSTREE) ] succeeds if $(OSTREE) is a directory.
# (See test(1).) Thus, if $(OSTREE) doesn't exist, it will be created.
#

# The kernel gets installed at the top of the installed system tree.
# Since with OS/161 it's relatively likely that you'll be working with
# several configurations at once, it gets installed under the name of
# this config, and a symbolic link with the "real" name is set up to
# point to the last kernel installed.
#
install:
	[ -d $(OSTREE) ] || mkdir $(OSTREE)
	cp $(KERNEL) $(OSTREE)/$(KERNEL)-$(CONFNAME)
	-rm -f $(OSTREE)/$(KERNEL)
	ln -s $(KERNEL)-$(CONFNAME) $(OSTREE)/$(KERNEL)

#
# Run tags on all the sources and header files. This is probably not
# the most useful way to do this and needs attention. (XXX)
#
tags:
	ctags -wtd $(SRCS) $(TAGS_HEADERS)

#
# This tells make that these rules are not files so it (hopefully)
# won't become confused if files by those names appear.
#
.PHONY: all depend clean install tags reconfig

#
# Get the list of source files from where it was generated by the 
# kernel config tool.
#
# This sets SRCS and OBJS, and also defines a rule for compiling each
# source file.
#
include files.mk

# Get dependency information.
include depend.mk

#
# Tell make that the kernel depends on the object files listed in $(OBJS).
# This (unlike the link commands that also use $(OBJS) above) must come
# after the include of files.mk, because of the way make reads its input
# and evaluates variables.
#
$(KERNEL): $(OBJS)
